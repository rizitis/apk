#!/bin/bash
# shellcheck disable=SC1091,SC2013,SC2153,SC2002,SC2126,SC2010,SC2206,SC2162,SC2188

# Christmas 2024 somewere in Greece...
# Merry Christmas

# GNU General Public License v2.0
# For more information, please refer <https://github.com/rizitis/apk/blob/main/LICENSE>

# Check if running as root
if [[ "$EUID" -ne 0 ]]; then
    echo "apk is a package manager! A package manager must be run as root. Exiting." >&2
    exit 1
fi

# source env
. /etc/apk/apk.env

# home dir
saved_dir=$(pwd)

# Extract the command argument
command=$1
PKG=$2

# List of commands that do not accept $2
invalid_with_second_arg="update|upgrade|restore-apk|upgrade-apk|info|list|stats|help|--help|-h"

# Check if $1 matches any command in the list
if [[ "$1" =~ $invalid_with_second_arg ]]; then
    if [[ -n "$2" ]]; then
        echo "Error: Command '$1' does not accept a second argument."
        echo "Please command <apk help> for help."
        exit 1
    fi
fi

must_have_second_arg="add|del|search|fix|download|show"

if [[ "$1" =~ $must_have_second_arg && -z "$2" ]]; then
    echo "Error: Command '$1' must be followed by a package_name." >&2
    echo "Please use 'apk help' for assistance." >&2
    exit 1
fi


if [[ "$1" == "--help" || "$1" == "-h" || "$1" == "help" ]]; then
    echo "
    # === Commands for  Download,Install,Upgrade,Remove,Search <packages> === #
    #
    # apk add pkg       Add/Install a package and its dependencies if exist in apk repository
    # apk del pkg       Delete a package
    # apk search pkg    Search for packages
    # apk show pkg      Print information about a package
    # apk fix pkg       Repair package or Upgrade it without modifying dependencies
    # apk download pkg  Download package files but not install
    #
    # === Commands which not followed by <package> === #
    #
    # apk update        Update apk repository {local files and package list}.
    # apk upgrade       Upgrade all installed packages from the apk repository ONLY.
    # apk info          List all installed packages from the apk repository ONLY.
    # apk list          List all apk repo available packages.
    # apk stats         Show statistics ONLY about apk repository and installations.
    # apk upgrade-apk   Upgrade apk script version and apk.env.
    # apk restore-apk   downgrade apk script and apk.env to previous status before upgrade-apk.
    # apk help          Print help message
    "
else
    # Check if at least one argument is provided
if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <command> [<package>]"
    echo "Commands: fix, show, add, download, search, upgrade, del, update, info, stats, upgrade-apk, restore-apk, help"
    echo '
    # apk update        Update apk repository local files and package list
    # apk upgrade       Upgrade all installed pkg from apk repository
    # apk add pkg       Add/Install a package
    # apk del pkg       Delete a package
    # apk search pkg    Search for packages
    # apk show pkg      Print information about a package
    # apk info          List all installed packages
    # apk list          List all apk repo available packages
    # apk fix           Repair (Reinstall) a package or Install/Upgrade it without modifying dependencies
    # apk stats         Show statistics about repositories and installations
    # apk download pkg  Download package files but not install
    # apk upgrade-apk   Upgrade apk version
    # apk restore-apk   downgrade apk one version back
    # apk help          Print help message
    '
    exit 1
fi

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

shift

# Handle commands
case $command in
    list)
        python "$_APKG"
        ;;
    fix)
        echo -e "${BLUE}Fixing $PKG (Install/Reinstall/Upgrade) but not dependencies.${NC}"
        temp_dir=$(mktemp -d)
        if [ ! -d "$temp_dir" ]; then
        echo "Failed to create temporary directory"
        exit 1
        fi
        cd "$temp_dir" || exit
        if ! curl -L --fail -O "$RF/$PKG.sha256sum"; then
        echo -e "${RED}Error: Failed to download '${YELLOW}$PKG.sha256sum${RED}' from the repository.${NC}" >&2
        echo -e "${YELLOW}Please check the package name or repository URL.${NC}" >&2
        exit 1
        fi

        # Download .tar.lz4 file
        if ! curl -L --fail -O "$RF/$PKG.tar.lz4"; then
        echo -e "${RED}Error: Failed to download '${YELLOW}$PKG.tar.lz4${RED}' from the repository.${NC}" >&2
        echo -e "${YELLOW}Please check the package name or repository URL.${NC}" >&2
        exit 1
        fi
        if sha256sum -c "$PKG.sha256sum" --quiet; then
        echo -e "${BLUE}Success $PKG.tar.lz4 is valid.${NC}"
        else
        echo -e "${RED}Huston? $PKG.tar.lz4 is INVALID.${NC}"
        exit 1
        fi
        tar --use-compress-program=lz4 -xvf "$PKG".tar.lz4

        cd "$PKG" || exit
        FN="$(cat BIN_NAME)"
        echo "$FN"
        expected_checksum=$(cut -d ' ' -f 1 "$FN".md5)
        # Compute the checksum of the downloaded file
        computed_checksum=$(md5sum "$FN" | cut -d ' ' -f 1)
       # Compare the checksums
        if [ "$expected_checksum" = "$computed_checksum" ]; then
        echo -e "${BLUE}Validation successful: Checksums match.${NC}"
        else
        echo -e "${RED}Ah Huston! Validation md5 failed: Checksums do not match!${NC}"
        exit 1
        fi

        upgradepkg --reinstall --install-new "$FN"
        for file in *.so.file; do
        [ -e "$file" ] || continue  # Skip if no matching files
        cp "$file" /usr/doc/"${FN%-x86_64*}"/
        done

        cd "$saved_dir" || exit
        rm -rf "$temp_dir"
        ;;
    show)
        echo -e "${BLUE}Showing package info...${NC}"
        temp_dir=$(mktemp -d)
        if [ ! -d "$temp_dir" ]; then
        echo -e "${RED}Failed to create temporary directory.${NC}"
        exit 1
        fi
        cd "$temp_dir" || exit

        echo -e "${BLUE}Attempting to download info for '${YELLOW}$PKG${BLUE}'...${NC}"
        if ! curl -L --fail -O "$RF"/"$PKG".sha256sum; then
        echo -e "${RED}Error: Package '${YELLOW}$PKG${RED}' does not exist in the appstream repository or its broken.${NC}" >&2
        echo -e "${YELLOW}Please check again package name or try (apk search $PKG)${NC}" >&2
        rm -rf "$temp_dir"
        exit 1
        fi

        echo -e "${BLUE}sha256sum for $PKG.tar.lz4 is:${NC}"
        cat "$PKG".sha256sum
        echo ""

        echo -e "${BLUE}Name of $PKG binary:${NC}"
        FN=$(curl -sL "$RF/$PKG.tar.lz4" | tar --use-compress-program=lz4 -xOf - "$PKG/BIN_NAME")
        echo "$FN"
        echo ""

        echo -e "${BLUE}Contents of $FN.md5:${NC}"
        curl -sL "$RF/$PKG.tar.lz4" | tar --use-compress-program=lz4 -xOf - "$PKG/$FN.md5"
        echo ""

        echo -e "${BLUE}Contents of $FN.txt:${NC}"
        curl -sL "$RF/$PKG.tar.lz4" | tar --use-compress-program=lz4 -xOf - "$PKG/$FN.txt"
        echo ""

        echo -e "${BLUE}Contents of makepkg-$PKG.log:${NC}"
        curl -sL "$RF/$PKG.tar.lz4" | tar --use-compress-program=lz4 -xOf - "$PKG/makepkg-$PKG.log"
        echo ""

        echo -e "${BLUE}Contents of README:${NC}"
        curl -sL "$RF/$PKG.tar.lz4" | tar --use-compress-program=lz4 -xOf - "$PKG/README"
        echo ""

        if ! curl -sL "$RF/$PKG.tar.lz4" | tar --use-compress-program=lz4 -tf - "$PKG/$PKG.dep" 2>/dev/null; then
        echo -e "${YELLOW}No dependencies found for $PKG.${NC}" >&2
        else
        echo -e "${BLUE}Dependencies:${NC}"
        # Extract the dependencies file
        curl -sL "$RF/$PKG.tar.lz4" | tar --use-compress-program=lz4 -xOf - "$PKG/$PKG.dep" 2>/dev/null
        fi

        echo ""

        echo -e "${BLUE}Contents of $FN.so.file:${NC}"
        curl -sL "$RF/$PKG.tar.lz4" | tar --use-compress-program=lz4 -xOf - "$PKG/$FN.so.file"
        echo ""

        echo -e "${GREEN}All $PKG information successfully retrieved.${NC}"

        cd "$saved_dir" || exit
        rm -rf "$temp_dir"
        ;;

     add)
       # Ask if the user wants to install/upgrade/reinstall
echo -e "${GREEN}Install/Upgrade/Reinstall $PKG and all dependencies${NC}"
temp_dir=$(mktemp -d)

if [ ! -d "$temp_dir" ]; then
    echo -e "${RED}Failed to create temporary directory${NC}"
    exit 1
fi

cd "$temp_dir" || exit

if ! curl -L -O "$RF"/"$PKG".sha256sum > /dev/null 2>&1; then
    echo "$PKG.sha256sum not found on $RF"
fi

if ! curl -L -O "$RF"/"$PKG".tar.lz4 > /dev/null 2>&1; then
    echo "$PKG.tar.lz4 not found on $RF"
fi

if sha256sum -c "$PKG.sha256sum" --quiet; then
    echo -e "${BLUE}Success $PKG.tar.lz4 is valid.${NC}"
else
    echo -e "${RED}Houston? $PKG.tar.lz4 is INVALID.${NC}"
    exit 1
fi

tar --use-compress-program=lz4 -xvf "$PKG".tar.lz4
cd "$PKG" || exit
FN="$(cat BIN_NAME)"
echo "$FN"
expected_checksum=$(cut -d ' ' -f 1 "$FN".md5)

# Compute the checksum of the downloaded file
computed_checksum=$(md5sum "$FN" | cut -d ' ' -f 1)

# Compare the checksums
if [ "$expected_checksum" = "$computed_checksum" ]; then
    echo -e "${BLUE}Validation successful: Checksums match.${NC}"
else
    echo -e "${RED}Ah Houston! Validation md5 failed: Checksums do not match!${NC}"
    exit 1
fi

# If no $PKG.dep, install pkg and exit
if [ ! -f "$PKG.dep" ]; then
    echo -e "${YELLOW}No dependencies found for $PKG.${NC}"
    upgradepkg --install-new --reinstall "$FN"

    for file in *.so.file; do
        [ -e "$file" ] || continue  # Skip if no matching files
        cp "$file" /usr/doc/"${FN%-x86_64*}"/
    done

    cd "$saved_dir" || exit
    rm -rf "$temp_dir"
    exit 0
else
    echo -e "${BLUE}Dependencies found:${NC}"
    PKGDEP1=all_deps1.txt
    > "$PKGDEP1"  # create all_deps1.txt
    cat "$PKG.dep" >> "$PKGDEP1"  # write $pkg.dep {a,b,c,d}

    # Now read {a.dep,b.dep,c.dep,d.dep} and write them in another txt (all_deps2.txt)
    echo -e "${BLUE}Dependencies calculation in progress...${NC}"
    for dep in $(cat "$PKGDEP1"); do
        if ! curl -sL "$RF"/"$dep".tar.lz4 | tar --use-compress-program=lz4 -xOf - "$dep"/"$dep".dep > /dev/null 2>&1; then
            PKGDEP2=all_deps2.txt
            > "$PKGDEP2"  # create all_deps2.txt
            echo "$dep" >> "$PKGDEP2"
        fi
    done

    # Now read "$PKGDEP2" and do the same
    for dep in $(cat "$PKGDEP2"); do
        if ! curl -sL "$RF"/"$dep".tar.lz4 | tar --use-compress-program=lz4 -xOf - "$dep"/"$dep".dep > /dev/null 2>&1; then
            PKGDEP3=all_deps3.txt
            > "$PKGDEP3"
            echo "$dep" >> "$PKGDEP3"
        fi
    done

    # Again...
    for dep in $(cat "$PKGDEP3"); do
        if ! curl -sL "$RF"/"$dep".tar.lz4 | tar --use-compress-program=lz4 -xOf - "$dep"/"$dep".dep > /dev/null 2>&1; then
            PKGDEP4=all_deps4.txt
            > "$PKGDEP4"
            echo "$dep" >> "$PKGDEP4"
        fi
    done

    # And again...
    for dep in $(cat "$PKGDEP4"); do
        if ! curl -sL "$RF"/"$dep".tar.lz4 | tar --use-compress-program=lz4 -xOf - "$dep1"/"$dep1".dep > /dev/null 2>&1; then
            PKGDEP5=all_deps5.txt
            > "$PKGDEP5"
            echo "$dep1" >> "$PKGDEP5"
        fi
    done

    # Enough...
    for dep in $(cat "$PKGDEP5"); do
        if ! curl -sL "$RF"/"$dep".tar.lz4 | tar --use-compress-program=lz4 -xOf - "$dep"/"$dep".dep > /dev/null 2>&1; then
            PKGDEP6=all_deps6.txt
            > "$PKGDEP6"
            echo "$dep" >> "$PKGDEP6"
        fi
    done

    # Merge all dep lists
    cat all_deps?.txt > all_deps.txt
    sort all_deps.txt | uniq > finall-deps.txt

    # Remove $PKG if it's a dep of dep of dep...
    sed -i "/^$PKG$/d" finall-deps.txt

    # If $PKG exists, we will have an empty line, so delete it
    sed -i '/^$/d' finall-deps.txt

    # Read the contents of final-deps.txt
    echo -e "${YELLOW}The following dependencies will be installed/upgrade:${NC}"
    cat final-deps.txt

    # Ask the user if they want to proceed with installation
    echo -e "${GREEN}Do you want to proceed with the installation? (y/n):${NC}"
    read -p "> " choice

    if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
        # If yes, proceed with installation
        echo -e "${GREEN}Proceeding with installation...${NC}"

        # Loop through each line in final-deps.txt and run apk fix
        while IFS= read -r pkg; do
            apk fix "$pkg"
        done < final-deps.txt

    else
        # If the user does not want to proceed
        echo -e "${RED}Installation aborted.${NC}"
        echo -e "${RED}If you only want to install $PKG but no dependencies${NC}"
        echo -e "${RED}CMD: apk fix $PKG${NC}"

        # Clean up
        cd "$saved_dir" || exit
        rm -rf "$temp_dir"
        exit
    fi

    # Install the main PKG
    upgradepkg --install-new --reinstall "$FN"
    for file in *.so.file; do
        [ -e "$file" ] || continue  # Skip if no matching files
        cp "$file" /usr/doc/"${FN%-x86_64*}"/
    done

    cd "$saved_dir" || exit
    rm -rf "$temp_dir"
fi
        ;;
    download)
        if [ -d /tmp/apk-"$PKG" ]; then
        mv /tmp/apk-"$PKG" /tmp/apk-"$PKG".bak
        fi
        mkdir -p /tmp/apk-"$PKG"
        cd /tmp/apk-"$PKG" || exit
        echo -e "${RED}Downloading $PKG files...${NC}"
        if ! curl -L --fail -O "$RF/$PKG.sha256sum"; then
        echo -e "${RED}Error: Failed to download '${YELLOW}$PKG.sha256sum${RED}' from the repository.${NC}" >&2
        echo -e "${YELLOW}Please check the package name or repository URL.${NC}" >&2
        exit 1
        fi

        # Download .tar.lz4 file
        if ! curl -L --fail -O "$RF/$PKG.tar.lz4"; then
        echo -e "${RED}Error: Failed to download '${YELLOW}$PKG.tar.lz4${RED}' from the repository.${NC}" >&2
        echo -e "${YELLOW}Please check the package name or repository URL.${NC}" >&2
        exit 1
        fi

        echo -e "${YELLOW}Files downloaded successfully:${NC}"
        echo -e " - $PKG.sha256sum"
        echo -e " - $PKG.tar.lz4"
        pwd
        ;;
    search)
        # Create a temporary directory
        temp_dir=$(mktemp -d)
        if [ ! -d "$temp_dir" ]; then
        echo -e "${RED}Failed to create temporary directory.${NC}"
        exit 1
        fi

        cd "$temp_dir" || exit
        if ! curl -sL --fail "$RF/$PKG.sha256sum" > /dev/null; then
        echo -e "${RED}Error: Failed to find '${YELLOW}$PKG.sha256sum${RED}' on repository.${NC}" >&2
        echo -e "${YELLOW}Please check the package name or repository URL.${NC}" >&2
        else
        echo -e "${GREEN}Success: File '${YELLOW}$PKG.sha256sum${GREEN}' exists on the repository.${NC}"
        fi

        # Check .tar.lz4 file
        if ! curl -sL --fail "$RF/$PKG.tar.lz4" > /dev/null; then
        echo -e "${RED}Error: Failed to find '${YELLOW}$PKG.tar.lz4${RED}' on repository.${NC}" >&2
        echo -e "${YELLOW}Please check the package name or repository URL.${NC}" >&2
        exit 1
        else
        echo -e "${GREEN}Success: File '${YELLOW}$PKG.tar.lz4${GREEN}' exists on the repository.${NC}"
        fi
        # Clean up
        cd "$saved_dir" || exit
        rm -rf "$temp_dir"
        ;;
    upgrade)
        temp_dir=$(mktemp -d)
        if [ ! -d "$temp_dir" ]; then
        echo -e "${RED}Failed to create temporary directory${NC}"
        exit 1
        fi
        cd "$temp_dir" || exit
        apk update

        grep -vFf "$_FDATA" "$_DSHARE"/"$_FLIST" > temp_file.txt
        select_lines_from_file() {
        local temp_file=temp_file.txt
        local output_file=output_file.txt


        if ! grep -q '^[^#[:space:]]' "$temp_file"; then
        echo -e "${GREEN}No package for upgrade found! Exiting.${NC}"
        exit 0
        fi
        echo ""
        echo -e "${BLUE}New packages for install/upgrade:${NC}"
        # Read all lines from temp_file into an array
        mapfile -t temp_lines < <(grep -vE '^\s*$|^\s*#' "$temp_file")
        # Initialize an empty array for selected lines
        selected_lines=()

        # Function to show the menu and get user input for each line/pkg
        function prompt_user {
        local line_number=$1
        local line_content=$2
        echo "$line_number: $line_content"
        echo -e "${GREEN}Do you want to upgrade this package?${NC} (y/n/all/quit)"
        read -r user_input
        user_input=$(echo "$user_input" | tr '[:upper:]' '[:lower:]')  # Convert to lowercase

        case $user_input in
            y)
                selected_lines+=("$line_content")
                ;;
            n)
                ;;
            all)
                selected_lines+=("${temp_lines[@]:$line_number-1}")
                return 1
                ;;
            quit)
                return 1
                ;;
            *)
                return 0
                ;;
        esac
    }

        # Loop through each line in temp_file and prompt the user for each line
        for i in "${!temp_lines[@]}"; do
        prompt_user $((i+1)) "${temp_lines[$i]}"
        if [ $? -eq 1 ]; then
            break
        fi
        done

        # Write selected lines to the output file
        if [ ${#selected_lines[@]} -gt 0 ]; then
        printf "%s\n" "${selected_lines[@]}" > "$output_file"
        echo "Selected lines have been copied to $output_file."
        else
        echo "No package selected. Exiting."
        exit 0
        fi
}

        # Call the function with the necessary file paths
        temp_file="temp_file.txt"  # Path to your temp file
        output_file="output_file.txt"  # Path to the output file

        # Call the function to perform the operation
        select_lines_from_file "$temp_file" "$output_file"

        PAK=$(sed 's/-[0-9]\+.*//' "$output_file")
        for up in $PAK; do
        apk fix "$up" || true
        done
        # Clean up
        cd "$saved_dir" || exit
        rm -rf "$temp_dir"
        ;;
    del)
        cd /var/adm/packages || exit
        RPKG=$(ls | grep "$PKG" | grep _rtz)
        # Check if any packages were found
        if [[ -z "$RPKG" ]]; then
        echo -e "${RED}No packages found${RESET}"
        exit 1
        fi


        echo -e "${BLUE}Packages found, Please confirm to delete:${RESET}"

        RPKG_ARRAY=($RPKG)
        counter=1
        for package in "${RPKG_ARRAY[@]}"; do
        echo -e "${YELLOW}$counter) $package${RESET}"
        ((counter++))
        done

        echo -e "${YELLOW}Please select the package by number to delete or press 0 to cancel:${RESET}"
        read -p "Your choice: " choice

        if [[ "$choice" -eq 0 ]]; then
        echo -e "${RED}Operation canceled.${RESET}"
        exit 0
        elif [[ "$choice" -gt 0 && "$choice" -le "${#RPKG_ARRAY[@]}" ]]; then
        # If valid choice, confirm and proceed to delete
        selected_package="${RPKG_ARRAY[$choice-1]}"
        echo -e "${GREEN}You selected: $selected_package${RESET}"
        read -p "Are you sure you want to delete $selected_package? (y/n): " confirmation

        if [[ "$confirmation" == "y" || "$confirmation" == "Y" ]]; then
        echo -e "${BLUE}Deleting $selected_package...${RESET}"
        removepkg "$selected_package"
        echo -e "${GREEN}Package $selected_package has been deleted.${RESET}"
        else
        echo -e "${RED}Deletion canceled.${RESET}"
        fi
        else
        echo -e "${RED}Invalid selection, please choose a valid number.${RESET}"
        exit 1
        fi
        ;;
    update)
    SECONDS=0  # Initialize timer
    echo -e "\033[1;33mUpdating repository list...\033[0m"
    # Check if the file list exists
    if [ -f "$_DSHARE"/"$_FLIST" ]; then
        LISTNUM=$(cat "$_DSHARE"/"$_FLIST")
        if [[ "$LISTNUM" == 0 ]]; then
        echo -e "\033[1;33mThis is the second time you run apk update ;).\033[0m"
        # Backup and update the file list
        cd "$_DSHARE" || exit
        mv "$_FLIST" "$_FLIST".bak
        curl -L -O "$RF"/"$FLIST"
        mv "$FLIST" "$_FLIST"
        cd "$saved_dir" || exit
        echo -e "\033[1;34m$_FLIST Updated! used: plan1\033[0m"
        else
        [ "$LISTNUM" != 0 ]
        echo -e "\033[1;33mUpdating $_FLIST ...\033[0m"
        # Backup and update the file list
        cd "$_DSHARE" || exit
        mv "$_FLIST" "$_FLIST".bak
        curl -L -O "$RF"/"$FLIST"
        mv "$FLIST" "$_FLIST"
        cd "$saved_dir" || exit
        echo -e "\033[1;34m$_FLIST Updated! used: plan2\033[0m"
        fi

    else
        if [ -f "$_DSHARE/$_FLIST.bak" ] && [ ! -f "$_DSHARE/$_FLIST.bak" ]; then
        echo -e "\033[1;33m$_DSHARE/$_FLIST does not exist!\033[0m"
        echo -e "\033[1;33mHowever, a backup $_FLIST.bak exists...\033[0m"
        echo -e "\033[1;33mAttempting to fix this issue by using the back-up $_FLIST...\033[0m"
        cd "$_DSHARE" || exit
        mv "$_FLIST".bak "$_FLIST"
        cd "$saved_dir" || exit
        echo -e "\033[1;33mYou are now using the back up file, used: plan-restore\033[0m"
        echo -e "\033[1;33mPlease run one more time <apk update>\033[0m"
        echo -e "\033[1;33mTips: check your internet connection, check your users permissions are you root?\033[0m"
        else
        echo -e "\033[1;33m$_DSHARE/$_FLIST or $_DSHARE/$_FLIST.bak not found. Creating directory and files...\033[0m"
        # Create the file list
        mkdir -p "$_DSHARE"
        cd "$_DSHARE" || exit
        curl -L -O "$RF"/"$FLIST0"
        mv "$FLIST0" "$_FLIST"
        cd "$saved_dir" || exit
        echo -e "\033[1;33m$_FLIST created successfully!\033[0m"
        echo -e "\033[1;33mPlease run one more time <apk update> to complete set-up! used: plan 0\033[0m"
        fi

    fi

    # Check if FDATA exists
    if [ -f "$_FDATA" ]; then
        echo -e "\033[1;33m$_FDATA found...\033[0m"
        echo -e "\033[1;33mUpdating $_FDATA ...\033[0m"
        ls /var/adm/packages/ | grep "_rtz" > "$_FDATA"
    else
        echo -e "\033[1;33mPackage data file ($_FDATA) not found.\033[0m"
        echo -e "\033[1;33mCreating $_FDATA with 0 packages in.\033[0m"
        mkdir -p "$_DDATA"
        cd "$_DDATA" || exit
        curl -L -O "$RF/$FDATA"
        cd "$saved_dir" || exit
        echo -e "\033[1;33m$_FDATA created successfully!\033[0m"
    fi

    if [ -f "$_APKG" ]; then
    rm "$_APKG"
    cd "$_DAPK" || exit
    curl -L -O https://raw.githubusercontent.com/rizitis/apk/refs/heads/main/apkg.py
    else
    cd "$_DAPK" || exit
    curl -L -O https://raw.githubusercontent.com/rizitis/apk/refs/heads/main/apkg.py
    fi
    echo ""
    # Calculate and print elapsed time
    ELAPSED_TIME=$SECONDS
    MINUTES=$((ELAPSED_TIME / 60))
    SECONDS_REMAINING=$((ELAPSED_TIME % 60))

    # Print elapsed time with different colors
    echo -e "\033[1;32mUpdate completed in \033[1;34m${MINUTES} minutes \033[1;33mand \033[1;35m${SECONDS_REMAINING} seconds\033[0m. Was that fast enough? ;)"
    ;;
    info)
       if [ -f "$_FDATA" ]; then
       FDATA_NUM=$(cat "$_FDATA")
            if [[ "$FDATA_NUM" == 0 ]]; then
            echo -e "\033[1;33mNo apk packages are installed so far!\033[0m"
            else
            echo -e "\033[1;33mListing apk installed packages...\033[0m"
            cat "$_FDATA"
            fi
        else
        echo -e "\033[1;33m$_FDATA not found.\033[0m"
        echo -e "\033[1;33mTry <apk update> to fix this.\033[0m"
        echo -e "\033[1;33mIf you already did, please open an issue in $MAIN_REPO/issues\033[0m"
        fi
        ;;
    stats)
        echo -e "\033[1;34mFirst updating apk files...\033[0m"
        apk update
        echo ""
        echo -e "\033[1;32mReady! Displaying apk statistics...\033[0m"
        echo ""

        echo -e "\033[1;36mRepository URL:\033[0m \033[4m$MAIN_REPO\033[0m"
        echo ""

        if [[ -f "$_FDATA" ]]; then
        # Count the number of lines
        lines=$(wc -l < "$_FDATA")
        echo -e "\033[1;32mYou have already installed \033[1;33m$lines\033[1;32m apk packages.\033[0m"
        else
        echo -e "\033[1;31mFile $_FDATA does not exist. Run: apk update first.\033[0m"
        fi
        echo ""

        if [[ -f "$_DSHARE"/"$_FLIST" ]]; then
        # Count the number of lines
        lines=$(grep -v '^\s*#' "$_DSHARE/$_FLIST" | grep -v '^\s*$' | wc -l)
        echo -e "\033[1;32mapk repository currently has \033[1;33m$lines\033[1;32m packages ready for installation.\033[0m"
        else
        echo -e "\033[1;31mFile $_FLIST does not exist. Run: apk update first.\033[0m"
        fi
        echo ""

        echo -e "\033[1;36mapk package manager last update appstream was:\033[0m"
        echo -e "\033[1;33m$(curl -s "https://api.github.com/repos/rizitis/apk/commits?path=apk" | jq -r '.[0].commit.committer.date')\033[0m"
        echo ""

        echo -e "\033[1;36mYour apk script was updated locally:\033[0m"
        stat /usr/local/sbin/apk | grep "Modify:"
        echo ""

        echo -e "\033[1;36mTo upgrade apk to a new version (if needed):\033[0m"
        echo -e "\033[1;33mcommand: apk upgrade-apk\033[0m"
        echo ""

        echo -e "\033[1;36mTo report a bug:\033[0m \033[4m$MAIN_REPO/issues\033[0m"
        echo -e "\033[1;36mCurrently open issues number is:\033[0m \033[1;33m$(curl -s "https://api.github.com/repos/rizitis/apk/issues?state=open" | jq length)\033[0m"
    ;;
    upgrade-apk)
    echo -e "\033[1;32mTaking backup $_FENV\033[0m"
    if [ -f "$_FENV".back ]; then
        cat "$_FENV" > "$_FENV".back
    else
        cp "$_FENV" "$_FENV".back
    fi
    echo -e "\033[1;32mTaking backup $_APK\033[0m"
    if [ -f "$_APK".back ]; then
        cat "$_APK" > "$_APK".back
        chmod -x "$_APK".back
    else
        cp "$_APK" "$_APK".back
        chmod -x "$_APK".back
    fi
    echo -e "\033[1;34mUpgrading $_APK\033[0m"
    pushd "$_DAPK" || exit
    rm "$_APK" || exit
    curl -L -O "$RF"/"$APK"
    chmod +x "$_APK"
    echo -e "\033[1;34mUpgrading $_FENV\033[0m"
    cd "$_DETC" || exit
    rm "$_FENV" || exit
    curl -L -O "$RF"/"$FENV"
    popd || exit
    echo -e "\033[1;32mapk successfully upgraded itself\033[0m"
    echo -e "\033[1;33mIf something is wrong, command <apk restore-apk> to downgrade it to previous version.\033[0m"
    ;;
restore-apk)
    echo -e "\033[1;33mRestoring apk to previous version\033[0m"
    cat "$_APK".back > "$_APK" || exit
    cat "$_FENV".back > "$_FENV" || exit
    echo -e "\033[1;32mSuccess. apk restored to previous version. Please run <apk update> and report a bug if needed: $MAIN_REPO/issues\033[0m"
    ;;
    *)
        echo "Unknown command: $command"
        exit 1
        ;;
esac
fi
